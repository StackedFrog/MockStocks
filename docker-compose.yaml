services:
  lgtm:
    image: grafana/otel-lgtm
    environment:
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_SECURITY_COOKIE_SAMESITE=none
      - GF_SERVER_ROOT_URL=/auth/grafana/
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    expose:
      - "4317"
      - "4318"
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/provisioning/dashboards:/otel-lgtm/grafana/conf/provisioning/dashboards
      - grafana_data:/var/lib/grafana
      - loki_data:/var/lib/loki
      - tempo_data:/var/lib/tempo
      - prometheus_data:/prometheus
    networks:
      - backend

  redis:
    image: redis
    env_file: ".env"
    expose:
      - "6379"
    volumes:
      - redisdata:/data
    networks:
      - backend
    command: redis-server --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 2s
      retries: 5

  db:
    image: postgres
    env_file: ".env"
    expose:
      - "5432"
    volumes:
      - ./sql/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
      - pgdata:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d dev_db"]
      interval: 5s
      timeout: 3s
      retries: 5

  auth:
    build:
      context: .
      dockerfile: services/auth_service/Dockerfile
    env_file: ".env"
    expose:
      - "4002"
    networks:
      - backend
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy

  gateway:
    build:
      context: .
      dockerfile: services/gateway/Dockerfile
    env_file: ".env"
    volumes:
      - ./view:/app/view
    environment:
      - DEV=false
    ports:
      - "4001:4001"
    networks:
      - backend

  user:
    build:
      context: .
      dockerfile: services/user_service/Dockerfile
    env_file: ".env"
    expose:
      - "4004"
    networks:
      - backend
    depends_on:
      db:
        condition: service_healthy

  stocks_api_service:
    build:
      context: .
      dockerfile: services/stocks_api_service/Dockerfile
    env_file: ".env"
    expose:
      - "4003"
    networks:
      - backend

networks:
  backend:
    driver: bridge

volumes:
  pgdata: {}
  redisdata: {}
  grafana_data: {}
  loki_data: {}
  tempo_data: {}
  prometheus_data: {}
